type CodeFolders {
    folderID: String!
    parentID: String!
	folderName: String!
	level: String!
	fType: String!
	active: Boolean!
}

type CodeFiles {
    fileID: String!
	folderID: String!
	fileName: String!
	level: String!
	fType: String!
	active: Boolean!
}

type CodeTree {
	files: [CodeFiles!]!
	folders: [CodeFolders!]!
}

type CodePackages {
    workerGroup: String!
	language: String!
	environmentID: String!
	packages: String!
}

input FolderNodeInput {
	folderID: String!
    parentID: String!
	environmentID: String!
	pipelineID: String!
	nodeID: String!
	folderName: String!
	fType: String!
	active: Boolean!
}

extend type Query {
  """
	Get a node's file structure.
	+ **Route**: Private
    + **Permissions**: admin_platform, admin_environment, environment_edit_all_pipelines, specific_pipeline[write], specific_pipeline[read]
	"""
  filesNode(environmentID: String!, nodeID: String!, pipelineID: String!): CodeTree

  """
	Get packages of a python script.
	+ **Route**: Private
    + **Permissions**: admin_platform, admin_environment, environment_edit_all_pipelines, specific_pipeline[write], specific_pipeline[read]
	"""
  getCodePackages( workerGroup: String!, language: String!, environmentID: String!, pipelineID: String!): CodePackages
}

extend type Mutation {
  """
	Create a folder structure.
	+ **Route**: Private
    + **Permissions**: admin_platform, admin_environment, environment_edit_all_pipelines, specific_pipeline[write]
	"""
  createFolderNode(input:FolderNodeInput): CodeFolders!

    """
	Move a folder structure.
	+ **Route**: Private
    + **Permissions**: admin_platform, admin_environment, environment_edit_all_pipelines, specific_pipeline[write]
	"""
  moveFolderNode(folderID: String!, toFolderID: String!, environmentID: String!, pipelineID: String!): String!

    """
	Delete a node's folder structure.
	+ **Route**: Private
    + **Permissions**: admin_platform, admin_environment, environment_edit_all_pipelines, specific_pipeline[write]
	"""
  deleteFolderNode(environmentID: String!, folderID: String!, nodeID: String!, pipelineID: String!): String!

    """
	Rename a folder.
	+ **Route**: Private
    + **Permissions**: admin_platform, admin_environment, environment_edit_all_pipelines, specific_pipeline[write]
	"""
  renameFolder(environmentID: String!, folderID: String!, nodeID: String!, pipelineID: String!, newName: String!): String!

    """
	Delete a file.
	+ **Route**: Private
    + **Permissions**: admin_platform, admin_environment, environment_edit_all_pipelines, specific_pipeline[write]
	"""
  deleteFileNode(environmentID: String!, fileID: String!, nodeID: String!, pipelineID: String!): String!

  """
	Rename a file.
	+ **Route**: Private
    + **Permissions**: admin_platform, admin_environment, specific_pipeline[write]
	"""
  renameFile(environmentID: String!, fileID: String!, nodeID: String!, pipelineID: String!, newName: String!): String!

  """
	Move a file.
	+ **Route**: Private
    + **Permissions**: admin_platform, admin_environment, environment_edit_all_pipelines, specific_pipeline[write]
	"""
  moveFileNode(fileID: String! toFolderID: String!, environmentID: String!, pipelineID: String!): String!

  """
	Update packages of a python script.
	+ **Route**: Private
    + **Permissions**: admin_platform, admin_environment, environment_edit_all_pipelines, specific_pipeline[write]
	"""
   updateCodePackages(workerGroup: String!, language: String!, packages: String!, environmentID: String!, pipelineID: String!): String!


}
