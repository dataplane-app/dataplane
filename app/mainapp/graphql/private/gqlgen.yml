# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - resolvers/*.graphqls

# Where should the generated server code go?
exec:
  filename: generated.go
  package: privategraphql

# Where should any generated models go?
model:
  filename: models.go
  package: privategraphql

models:
 User:
   model: dataplane/mainapp/database/models.Users
 AvailablePermissions:
   model: dataplane/mainapp/database/models.ResourceTypeStruct
 Environments:
   model: dataplane/mainapp/database/models.Environment
 Permissions:
   model: dataplane/mainapp/database/models.Permissions
 PermissionsOutput:
   model: dataplane/mainapp/database/models.PermissionsOutput
 AccessGroups:
   model: dataplane/mainapp/database/models.PermissionsAccessGroups
 PermissionsAccessGUsersOutput:
   model: dataplane/mainapp/database/models.PermissionsAccessGUsersOutput
 Secrets:
   model: dataplane/mainapp/database/models.Secrets
 SecretWorkerGroups:
   model: dataplane/mainapp/database/models.WorkerSecrets
#  Pipelines:
#    model: dataplane/mainapp/database/models.Pipelines
 PipelineEdges:
   model: dataplane/mainapp/database/models.PipelineEdges
 PipelineNodes:
   model: dataplane/mainapp/database/models.PipelineNodes
 PipelineRuns:
   model: dataplane/mainapp/database/models.PipelineRuns
 LogsWorkers:
   model: dataplane/mainapp/database/models.LogsWorkers
 LogsCodeRun:
   model: dataplane/mainapp/database/models.LogsCodeRun
 CodeFolders:
   model: dataplane/mainapp/database/models.CodeFolders
 CodeFiles:
   model: dataplane/mainapp/database/models.CodeFiles

resolver:
  layout: follow-schema
  dir: ./resolvers
  package: privateresolvers
  filename_template: "{name}.resolvers.go"

autobind: []
# Where should the resolver implementations go?
#resolver:
#  layout: follow-schema
#  dir: graph
#  package: graph

# Optional: turn on use ` + "`" + `gqlgen:"fieldName"` + "`" + ` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
#autobind:
#  - "github.com/your/app/graph/model"

